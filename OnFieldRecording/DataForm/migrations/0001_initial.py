# Generated by Django 5.2.7 on 2025-10-26 10:46

import DataForm.models
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Operation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(db_index=True, default=False)),
                ('start_at', models.DateTimeField(blank=True, null=True)),
                ('end_at', models.DateTimeField(blank=True, null=True)),
                ('next_record_seq', models.IntegerField(default=1, help_text='Next sequence number for record numbering')),
                ('is_deleted', models.BooleanField(default=False)),
                ('closed_at', models.DateTimeField(blank=True, null=True)),
                ('closed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='operations_closed', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='operations_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Operation',
                'verbose_name_plural': 'Operations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Record',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record_number', models.CharField(db_index=True, editable=False, max_length=50, unique=True)),
                ('customer_name', models.CharField(max_length=200)),
                ('customer_contact', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator(message="Contact must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('gps_latitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)])),
                ('gps_longitude', models.DecimalField(blank=True, decimal_places=7, max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)])),
                ('gps_address', models.TextField(blank=True, help_text='Human-readable address from GPS')),
                ('account_number', models.CharField(db_index=True, max_length=100)),
                ('meter_number', models.CharField(db_index=True, max_length=100)),
                ('todays_balance', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('meter_reading', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('type_of_anomaly', models.CharField(choices=[('none', 'No Anomaly'), ('meter_damaged', 'Meter Damaged'), ('meter_missing', 'Meter Missing'), ('meter_tampered', 'Meter Tampered'), ('incorrect_reading', 'Incorrect Reading'), ('access_denied', 'Access Denied'), ('customer_relocated', 'Customer Relocated'), ('other', 'Other')], default='none', max_length=50)),
                ('remarks', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('verified', 'Verified')], default='draft', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='records_created', to=settings.AUTH_USER_MODEL)),
                ('operation', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='records', to='DataForm.operation')),
            ],
            options={
                'verbose_name': 'Record',
                'verbose_name_plural': 'Records',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RecordMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=DataForm.models.record_media_upload_path)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('file_size', models.IntegerField(editable=False, help_text='File size in bytes')),
                ('is_processed', models.BooleanField(default=False, help_text='Whether OCR/image processing has been done')),
                ('ocr_result', models.TextField(blank=True, help_text='OCR extracted text')),
                ('ocr_confidence', models.FloatField(blank=True, help_text='OCR confidence score', null=True)),
                ('record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='media_files', to='DataForm.record')),
                ('uploaded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Record Media',
                'verbose_name_plural': 'Record Media Files',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('staff', 'Staff'), ('admin', 'Admin')], default='staff', max_length=10)),
                ('employee_id', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('create', 'Create'), ('update', 'Update'), ('delete', 'Delete'), ('open_operation', 'Open Operation'), ('close_operation', 'Close Operation'), ('reopen_operation', 'Reopen Operation'), ('export', 'Export Data'), ('login', 'User Login'), ('logout', 'User Logout'), ('password_change', 'Password Change')], max_length=50)),
                ('target_type', models.CharField(choices=[('record', 'Record'), ('operation', 'Operation'), ('user', 'User'), ('media', 'Media')], max_length=50)),
                ('target_id', models.IntegerField(help_text='ID of the affected object')),
                ('details', models.JSONField(blank=True, default=dict, help_text='Additional details about the action')),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Audit Log',
                'verbose_name_plural': 'Audit Logs',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['-timestamp'], name='DataForm_au_timesta_384ee9_idx'), models.Index(fields=['user', '-timestamp'], name='DataForm_au_user_id_ee4340_idx'), models.Index(fields=['target_type', 'target_id'], name='DataForm_au_target__8feb1e_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='operation',
            index=models.Index(fields=['is_active', '-created_at'], name='DataForm_op_is_acti_95cc14_idx'),
        ),
        migrations.AddIndex(
            model_name='operation',
            index=models.Index(fields=['is_deleted'], name='DataForm_op_is_dele_ca867b_idx'),
        ),
        migrations.AddConstraint(
            model_name='operation',
            constraint=models.CheckConstraint(condition=models.Q(('is_active', False), ('is_deleted', False), _connector='OR'), name='no_active_deleted_operation'),
        ),
        migrations.AddIndex(
            model_name='record',
            index=models.Index(fields=['operation', '-created_at'], name='DataForm_re_operati_615f7e_idx'),
        ),
        migrations.AddIndex(
            model_name='record',
            index=models.Index(fields=['record_number'], name='DataForm_re_record__898f73_idx'),
        ),
        migrations.AddIndex(
            model_name='record',
            index=models.Index(fields=['account_number'], name='DataForm_re_account_266fd9_idx'),
        ),
        migrations.AddIndex(
            model_name='record',
            index=models.Index(fields=['meter_number'], name='DataForm_re_meter_n_c275d6_idx'),
        ),
        migrations.AddIndex(
            model_name='record',
            index=models.Index(fields=['status'], name='DataForm_re_status_9ffb73_idx'),
        ),
        migrations.AddIndex(
            model_name='record',
            index=models.Index(fields=['type_of_anomaly'], name='DataForm_re_type_of_038b82_idx'),
        ),
    ]
